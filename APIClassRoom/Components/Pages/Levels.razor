@page "/levels"
@using APIClassRoom.Model
@using APIClassRoom.Storage
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@inject NavigationManager Navigation

<h3>Select a Level</h3>

<div class="card-container">
    <button class="level-card" @onclick="() => NavigateToLevel(1)">L1</button>
    <button class="level-card" @onclick="() => NavigateToLevel(2)">L2</button>
    <button class="level-card" @onclick="() => NavigateToLevel(3)">L3</button>
    <button class="level-card" @onclick="() => NavigateToLevel(4)">M1</button>
    <button class="level-card" @onclick="() => NavigateToLevel(5)">M2</button>
    <button class="level-card" @onclick="OpenPopup">+</button>
</div>

@if (showPopup)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h3>Create New User</h3>
            <EditForm Model="newUser" OnValidSubmit="CreateUser">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label>Full Name:</label>
                    <InputText @bind-Value="newUser.FullName" class="form-control" required />
                </div>

                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="newUser.Email" class="form-control" type="email" required />
                </div>

                <div class="form-group">
                    <label>Password:</label>
                    <InputText @bind-Value="newUser.Password" class="form-control" type="password" required />
                </div>

                <div class="form-group">
                    <label>Role:</label>
                    <InputSelect @bind-Value="newUser.Role" class="form-control" @onchange="RoleChanged">
                        <option value="@UserRole.Teacher">Teacher</option>
                        <option value="@UserRole.Student">Student</option>
                    </InputSelect>
                </div>

                @if (newUser.Role == UserRole.Student)
                {
                    <div class="form-group">
                        <label>Level:</label>
                        <InputSelect @bind-Value="newUser.LevelId" class="form-control">
                            <option value="1">L1</option>
                            <option value="2">L2</option>
                            <option value="3">L3</option>
                            <option value="4">M1</option>
                            <option value="5">M2</option>
                        </InputSelect>
                    </div>
                }

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @(isSubmitting ? "Creating..." : "Create")
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (showAlert)
{
    <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
        User created successfully!
    </RadzenAlert>
}

@code {
    [Inject] public UserStorage UserStorage { get; set; }

    private bool showPopup = false;
    private bool showAlert = false;
    private bool isSubmitting = false;

    private User newUser = new User();

    private void NavigateToLevel(int levelId)
    {
        Navigation.NavigateTo($"/students/{levelId}");
    }

    private void OpenPopup()
    {
        showPopup = true;
        newUser = new User();
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private void RoleChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<UserRole>(e.Value?.ToString(), out UserRole selectedRole))
        {
            newUser.Role = selectedRole;
            if (selectedRole == UserRole.Teacher)
            {
                newUser.LevelId = null;
            }
        }
    }

    private async Task CreateUser()
    {
        isSubmitting = true;

        try
        {
            bool result = await UserStorage.CreateUserAsync(newUser);
            if (result)
            {
                ClosePopup();
                showAlert = true;

                var timer = new System.Timers.Timer(3000);
                timer.Elapsed += (sender, args) =>
                {
                    showAlert = false;
                    InvokeAsync(StateHasChanged);
                    timer.Stop();
                    timer.Dispose();
                };
                timer.Start();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}


<style>
    .card-container {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 20px;
    }

    .level-card {
        padding: 15px 25px;
        font-size: 18px;
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 8px;
    }

    .level-card:hover {
        background-color: #0056b3;
    }
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .form-actions button {
        padding: 8px 16px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .form-actions button[type="submit"] {
        background-color: #007bff;
        color: white;
    }

</style>