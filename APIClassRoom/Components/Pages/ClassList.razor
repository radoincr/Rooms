@page "/classes"
@using APIClassRoom.Model
@using APIClassRoom.Storage
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ClassStorage classStorage
@inject TimeSlotStorage timeSlotStorage
@attribute [Authorize(Roles = "Admin")]

<h3>Class Management</h3>

<button class="btn btn-primary" @onclick="ShowAddClassPopup">Add Class</button>

<table class="table table-bordered class-table mt-3">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Location</th>
        <th>Block</th>
        <th>Department</th>
        <th>action</th>
    </tr>
    </thead>
    <tbody>
    @if (classList != null)
    {
        @foreach (var c in classList)
        {
            <tr >
                <td >
                    <a @onclick="() => ShowTimeSlots(c)" class="clickable-row">@c.IdClass</a>
                </td>
                <td>@c.Name</td>
                <td>@c.Localisation</td>
                <td>@c.Block</td>
                <td>@c.Department</td>
                <td>
                    <button class="btn btn-primary">Edit</button>
                    <button class="btn btn-danger" @onclick="() => removeClass(c.IdClass)">Remove</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@if (showAddClassPopup)
{
    <div class="popup">
        <div class="popup-content">
            <h4>Add New Class</h4>
            <input type="text" @bind="newClass.Name" placeholder="Class Name" class="form-control"/>
            <input type="text" @bind="newClass.Localisation" placeholder="Location" class="form-control mt-2"/>
            <input type="text" @bind="newClass.Block" placeholder="Block" class="form-control mt-2"/>
            <input type="text" @bind="newClass.Department" placeholder="Department" class="form-control mt-2"/>
            <div class="mt-3">
                <button class="btn btn-success" @onclick="AddClassAsync">Add Class</button>
                <button class="btn btn-danger" @onclick="ClosePopup">Cancel</button>
            </div>
        </div>
    </div>
}
@if (showTimeSlotPopup)
{
    <div class="popup">
        <div class="popup-content time-slot-popup">
            <h4>Time Slots for @selectedClass.Name</h4>
            <table class="table table-bordered schedule-table">
                <thead>
                <tr>
                    <th>Time Slot</th>
                    <th>Sunday</th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var slot in timeSlots)
                {
                    <tr>
                        <td>@slot.TimeSlotValue</td>
                        <td>@slot.Sunday </td>
                        <td>@slot.Monday </td>
                        <td>@slot.Tuesday </td>
                        <td>@slot.Wednesday</td>
                        <td>@slot.Thursday </td>
                    </tr>
                }
                </tbody>
            </table>
            <button class="btn btn-danger mt-2" @onclick="CloseTimeSlotPopup">Close</button>
        </div>
    </div>
}

@code {
    private List<ClassRoom> classList = new();
    private List<TimeSlot> timeSlots = new();
    private ClassRoom selectedClass;
    private ClassRoom newClass = new();
    private bool showAddClassPopup = false;
    private bool showTimeSlotPopup = false;

    protected override async Task OnInitializedAsync()

    {
        await Task.Delay(1000);
        classList = await classStorage.GetAllClassesAsync();
    }

    public async Task LoadData()
    {
    }

    private void ShowAddClassPopup()
    {
        showAddClassPopup = true;
    }

    private void ClosePopup()
    {
        showAddClassPopup = false;
        newClass = new();
    }

    private async Task AddClassAsync()
    {
        int newClassId = await classStorage.AddClassAsync(newClass);
        await timeSlotStorage.AddTimeSlotsForClassAsync(newClassId);

        classList = await classStorage.GetAllClassesAsync();
        ClosePopup();
    }

    private async Task ShowTimeSlots(ClassRoom c)
    {
        selectedClass = c;
        timeSlots = await timeSlotStorage.GetTimeSlotsByClassIdAsync(c.IdClass);
        showTimeSlotPopup = true;
    }

    private void CloseTimeSlotPopup()
    {
        showTimeSlotPopup = false;
        selectedClass = null;
    }

    private async Task removeClass(int cIdClass)
    {
        await classStorage.DeleteClassAsync(cIdClass);
        LoadData();
    }

}


<style>
    .table td {
        text-align: center;
        font-weight: bold;
    }

    .table td.available {
        color: green;
    }

    .table td.unavailable {
        color: red;
    }

    .popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 200%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .popup-content {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        width: 1000px;  /* Let the content define the width */
      
        text-align: center;
    }

    tr {
        transition: background 0.3s;
    }

    tr:hover {
        background: lightgray;
    }
    /* Class Table */
    .class-table {
        width: 100%;
        border-collapse: collapse;
    }

    .class-table th {
        background: #007bff;
        color: white;
        padding: 10px;
    }

    .class-table td {
        padding: 8px;
        text-align: center;
        cursor: pointer;
    }

    /* Highlight Row on Hover */
    .clickable-row:hover {
        background-color: #f1f1f1;
        cursor: pointer;
    }

    /* Schedule Table */
    .schedule-table {
        width: 100%;
        border-collapse: collapse;
    }

    .schedule-table th {
        background: #28a745;
        color: white;
        padding: 10px;
        text-align: center;
    }

    .schedule-table td {
        padding: 8px;
        text-align: center;
    }

    /* Popup Modal */
    .popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .popup-content {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        width: 500px;
        text-align: center;
    }

    .popup-content h4 {
        margin-bottom: 15px;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-success {
        background: #28a745;
        color: white;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn:hover {
        opacity: 0.8;
    }
    .popup-content.time-slot-popup {
        width: 800px; /* Adjust width as needed */
        max-width: 90%;
    }
</style>